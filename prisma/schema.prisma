
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                String    @id @default(cuid())
  email            String    @unique
  password         String
  userName        String?
  phone            String?
  avatar           String?
  
  // Address Information
  addresses        Address[]
  
  // User Preferences
  role             UserRole  @default(CUSTOMER)
  isActive         Boolean   @default(true)
  isVerified       Boolean   @default(false)
  emailVerifiedAt  DateTime?
  
  // Authentication
  refreshTokens    RefreshToken[]
  passwordResetToken String?
  passwordResetExpires DateTime?
  
  // Shopping
  cart             Cart?
  orders           Order[]
  reviews          Review[]
  wishlist         WishlistItem[]
  
  // Audit Trail
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  lastLoginAt      DateTime?
  
  @@map("users")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

// Product Model
model Product {
  id           String   @id @default(cuid())
  name         String
  description  String
  price        Decimal  @db.Decimal(10, 2)
  comparePrice Decimal? @db.Decimal(10, 2)
  sku          String   @unique
  barcode      String?
  
  // Inventory
  stock        Int      @default(0)
  lowStockThreshold Int @default(10)
  trackQuantity Boolean @default(true)
  
  // Organization
  categoryId   String
  category     Category @relation(fields: [categoryId], references: [id])
  brand        String?
  tags         String[]
  
  // Media
  images       ProductImage[]
  
  // Variants (size, color, etc.)
  variants     ProductVariant[]
  
  // SEO & Marketing
  slug         String   @unique
  metaTitle    String?
  metaDescription String?
  featured     Boolean  @default(false)
  
  // Status
  status       ProductStatus @default(DRAFT)
  publishedAt  DateTime?
  
  // Relations
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      Review[]
  wishlistItems WishlistItem[]
  
  // Audit Trail
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  @@map("products")
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  OUT_OF_STOCK
}

// Category Model
model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  slug        String    @unique
  image       String?
  
  // Hierarchy
  parentId    String?
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  
  // Products
  products    Product[]
  
  // SEO
  metaTitle   String?
  metaDescription String?
  
  // Status
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  
  // Audit Trail
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("categories")
}

// Order Model
model Order {
  id            String      @id @default(cuid())
  orderNumber   String      @unique
  
  // Customer
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  customerName  String      // For API compatibility
  
  // Order Details
  items         OrderItem[]
  status        OrderStatus @default(NEW)
  notes         String?
  adminNotes    String?
  
  // Pricing
  subtotal      Decimal     @db.Decimal(10, 2)
  tax           Decimal     @default(0) @db.Decimal(10, 2)
  shipping      Decimal     @default(0) @db.Decimal(10, 2)
  discount      Decimal     @default(0) @db.Decimal(10, 2)
  total         Decimal     @db.Decimal(10, 2)
  
  // Addresses
  shippingAddress Json?
  billingAddress  Json?
  
  // Payment
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod String?
  paymentIntentId String?
  
  // Shipping
  shippingMethod String?
  trackingNumber String?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  
  // Audit Trail
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("orders")
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

// Order Item Model
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  name      String  // Store product name at time of order
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)
  
  // Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("order_items")
}

// Cart Model
model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  
  // Totals
  subtotal  Decimal    @default(0) @db.Decimal(10, 2)
  
  // Audit Trail
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@map("carts")
}

model CartItem {
  id        String  @id @default(cuid())
  cartId    String
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)
  
  // Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([cartId, productId])
  @@map("cart_items")
}

// Product Image Model
model ProductImage {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String
  altText   String?
  sortOrder Int     @default(0)
  
  // Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("product_images")
}

// Product Variant Model
model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  name      String  // e.g., "Size", "Color"
  value     String  // e.g., "Large", "Red"
  price     Decimal? @db.Decimal(10, 2) // Price adjustment
  stock     Int?    // Variant-specific stock
  sku       String? @unique
  
  // Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("product_variants")
}

// Address Model
model Address {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Address Details
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?
  
  // Address Type
  isDefault Boolean @default(false)
  type      AddressType
  
  // Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("addresses")
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

// Review Model
model Review {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  rating    Int     // 1-5 stars
  title     String?
  comment   String?
  verified  Boolean @default(false) // Verified purchase
  
  // Status
  status    ReviewStatus @default(PENDING)
  
  // Audit Trail
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, productId])
  @@map("reviews")
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

// Wishlist Model
model WishlistItem {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  
  // Audit Trail
  createdAt DateTime @default(now())
  
  @@unique([userId, productId])
  @@map("wishlist_items")
}

// Refresh Token Model
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  
  // Audit Trail
  createdAt DateTime @default(now())
  
  @@map("refresh_tokens")
}