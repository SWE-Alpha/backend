generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(cuid())
  number               String    @unique
  password             String?
  userName             String?
  phone                String?
  avatar               String?
  role                 UserRole  @default(CUSTOMER)
  isActive             Boolean   @default(true)
  isVerified           Boolean   @default(false)
  emailVerifiedAt      DateTime?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  lastLoginAt          DateTime?
  addresses            Address[]
  cart                 Cart?
  orders               Order[]
  reviews              Review[]

  @@map("users")
}

model Product {
  id          String           @id @default(cuid())
  name        String
  description String
  price       Decimal          @db.Decimal(10, 2)
  stock       Int              @default(0)
  featured    Boolean          @default(false)
  status      ProductStatus    @default(DRAFT)
  publishedAt DateTime?
  categoryId  String           // Add this line
  category    Category @relation(fields: [categoryId], references: [id])
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  cartItems   CartItem[]
  orderItems  OrderItem[]
  images      ProductImage[]
  variants    ProductVariant[]
  reviews     Review[]

  @@map("products")
}

model Order {
  id              String        @id @default(cuid())
  orderNumber     String        @unique
  userId          String
  customerName    String
  status          OrderStatus   @default(NEW)
  notes           String?
  adminNotes      String?
  subtotal        Decimal       @db.Decimal(10, 2)
  tax             Decimal       @default(0) @db.Decimal(10, 2)
  shipping        Decimal       @default(0) @db.Decimal(10, 2)
  discount        Decimal       @default(0) @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  shippingAddress Json?
  billingAddress  Json?
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMethod   String?
  paymentIntentId String?
  shippingMethod  String?
  trackingNumber  String?
  shippedAt       DateTime?
  deliveredAt     DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           OrderItem[]
  user            User          @relation(fields: [userId], references: [id])

  @@map("orders")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  image       String?
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]
  @@map("categories")
}
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  name      String
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  total     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  subtotal  Decimal    @default(0) @db.Decimal(10, 2)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id])

  @@map("carts")
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("cart_items")
}

model ProductImage {
  id        String   @id @default(cuid())
  productId String
  url       String
  altText   String?
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductVariant {
  id        String   @id @default(cuid())
  productId String
  name      String
  value     String
  price     Decimal? @db.Decimal(10, 2)
  stock     Int?
  sku       String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model Address {
  id        String      @id @default(cuid())
  userId    String
  firstName String
  lastName  String
  company   String?
  address1  String
  address2  String?
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?
  isDefault Boolean     @default(false)
  type      AddressType
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Review {
  id        String       @id @default(cuid())
  userId    String
  productId String
  rating    Int
  title     String?
  comment   String?
  verified  Boolean      @default(false)
  status    ReviewStatus @default(PENDING)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  product   Product      @relation(fields: [productId], references: [id])
  user      User         @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

enum UserRole {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
  OUT_OF_STOCK
}

enum OrderStatus {
  NEW
  IN_PROGRESS
  FULFILLED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}
